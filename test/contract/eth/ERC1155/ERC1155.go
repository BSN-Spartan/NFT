// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ERC1155

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC1155ABI is the input ABI used to generate the binding from.
const ERC1155ABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"symbol\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// ERC1155Bin is the compiled bytecode used for deploying new contracts.
var ERC1155Bin = "0x60a06040523060805234801561001457600080fd5b50600054610100900460ff168061002e575060005460ff16155b6100955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100b7576000805461ffff19166101011790555b80156100c9576000805461ff00191690555b50608051612783620000fb600039600081816105dd0152818161061d0152818161078e01526107ce01526127836000f3fe6080604052600436106101295760003560e01c80638da5cb5b116100ab578063da71442a1161006f578063da71442a14610317578063db57d3aa14610337578063e725f87714610357578063e985e9c514610377578063f242432a146103a7578063f2fde38b146103c757600080fd5b80638da5cb5b1461026f5780639dc29fac14610297578063a22cb465146102b7578063b2dc5dc3146102d7578063c87b56dd146102f757600080fd5b80634e1273f4116100f25780634e1273f4146101e55780634f1ef286146102125780635a44621514610225578063715018a6146102455780638129fc1c1461025a57600080fd5b8062fdd58e1461012e57806317fd1d801461016157806325d112a91461018e5780632eb2c2d6146101a35780633659cfe6146101c5575b600080fd5b34801561013a57600080fd5b5061014e610149366004611ae0565b6103e7565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c366004611b0a565b610443565b6040516101589190611b73565b34801561019a57600080fd5b5060cb5461014e565b3480156101af57600080fd5b506101c36101be366004611ccf565b6104e5565b005b3480156101d157600080fd5b506101c36101e0366004611d78565b6105d3565b3480156101f157600080fd5b50610205610200366004611d93565b61069b565b6040516101589190611e98565b6101c3610220366004611eab565b610784565b34801561023157600080fd5b506101c3610240366004611eee565b61083d565b34801561025157600080fd5b506101c3610885565b34801561026657600080fd5b506101c36108bb565b34801561027b57600080fd5b506033546040516001600160a01b039091168152602001610158565b3480156102a357600080fd5b506101c36102b2366004611ae0565b610936565b3480156102c357600080fd5b506101c36102d2366004611f47565b61098d565b3480156102e357600080fd5b506101c36102f2366004611f83565b610a5b565b34801561030357600080fd5b50610181610312366004611b0a565b610b38565b34801561032357600080fd5b506101c3610332366004612050565b610b55565b34801561034357600080fd5b506101c3610352366004612130565b610cff565b34801561036357600080fd5b50610181610372366004611b0a565b610d81565b34801561038357600080fd5b506103976103923660046121c5565b610d9e565b6040519015158152602001610158565b3480156103b357600080fd5b506101c36103c23660046121f8565b610e0b565b3480156103d357600080fd5b506101c36103e2366004611d78565b610e8b565b60006001600160a01b0383166104185760405162461bcd60e51b815260040161040f9061225c565b60405180910390fd5b50600081815260cf602090815260408083206001600160a01b03861684529091529020545b92915050565b600081815260cd602052604090208054606091906104609061228a565b80601f016020809104026020016040519081016040528092919081815260200182805461048c9061228a565b80156104d95780601f106104ae576101008083540402835291602001916104d9565b820191906000526020600020905b8154815290600101906020018083116104bc57829003601f168201915b50505050509050919050565b81518351146105065760405162461bcd60e51b815260040161040f906122c4565b60005b8351811015610560576105508686868481518110610529576105296122fb565b6020026020010151868581518110610543576105436122fb565b6020026020010151610f23565b61055981612327565b9050610509565b50836001600160a01b0316856001600160a01b031661057c3390565b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516105b6929190612340565b60405180910390a46105cc338686868686610f86565b5050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361061b5760405162461bcd60e51b815260040161040f90612365565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661064d611118565b6001600160a01b0316146106735760405162461bcd60e51b815260040161040f906123b1565b61067c81611146565b6040805160008082526020820190925261069891839190611170565b50565b606081518351146106be5760405162461bcd60e51b815260040161040f906122c4565b600083516001600160401b038111156106d9576106d9611b86565b604051908082528060200260200182016040528015610702578160200160208202803683370190505b50905060005b835181101561077c5761074d858281518110610726576107266122fb565b6020026020010151858381518110610740576107406122fb565b60200260200101516103e7565b82828151811061075f5761075f6122fb565b60209081029190910101528061077481612327565b915050610708565b509392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107cc5760405162461bcd60e51b815260040161040f90612365565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107fe611118565b6001600160a01b0316146108245760405162461bcd60e51b815260040161040f906123b1565b61082d82611146565b61083982826001611170565b5050565b6033546001600160a01b031633146108675760405162461bcd60e51b815260040161040f906123fd565b60c96108738382612478565b5060ca6108808282612478565b505050565b6033546001600160a01b031633146108af5760405162461bcd60e51b815260040161040f906123fd565b6108b960006112b4565b565b600054610100900460ff16806108d4575060005460ff16155b6108f05760405162461bcd60e51b815260040161040f90612537565b600054610100900460ff16158015610912576000805461ffff19166101011790555b61091a611306565b61092261136d565b8015610698576000805461ff001916905550565b61094082826113d4565b60408051828152600060208201819052916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050565b6001600160a01b03821633036109ef5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a73657474696e6720617070726f76616c20666f722073656c6044820152603360f91b606482015260840161040f565b33600081815260d0602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600081516001600160401b03811115610a7657610a76611b86565b604051908082528060200260200182016040528015610a9f578160200160208202803683370190505b50905060005b8251811015610ae357610ad184848381518110610ac457610ac46122fb565b60200260200101516113d4565b80610adb81612327565b915050610aa5565b5060006001600160a01b038416336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051610b2b929190612340565b60405180910390a4505050565b600081815260ce602052604090208054606091906104609061228a565b8151835114610b765760405162461bcd60e51b815260040161040f906122c4565b60cb5483516000906001600160401b03811115610b9557610b95611b86565b604051908082528060200260200182016040528015610bbe578160200160208202803683370190505b50905060005b8551811015610c9657610bd8600184612585565b925082828281518110610bed57610bed6122fb565b602002602001018181525050610c8489898381518110610c0f57610c0f6122fb565b6020026020010151898481518110610c2957610c296122fb565b6020026020010151858581518110610c4357610c436122fb565b60200260200101518a8681518110610c5d57610c5d6122fb565b60200260200101518a8781518110610c7757610c776122fb565b6020026020010151611434565b80610c8e81612327565b915050610bc4565b506001600160a01b0388166000336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8489604051610cde929190612340565b60405180910390a4610cf53360008a848988610f86565b5050505050505050565b600060cb546001610d109190612585565b9050610d20878787848888611434565b60408051828152602081018690526001600160a01b0389169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d7833600089848887611505565b50505050505050565b600081815260cc602052604090208054606091906104609061228a565b60006001600160a01b03831615801590610dc057506001600160a01b03821615155b610ddc5760405162461bcd60e51b815260040161040f9061225c565b506001600160a01b03918216600090815260d06020908152604080832093909416825291909152205460ff1690565b610e1785858585610f23565b836001600160a01b0316856001600160a01b0316610e323390565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051610e75929190918252602082015260400190565b60405180910390a46105cc338686868686611505565b6033546001600160a01b03163314610eb55760405162461bcd60e51b815260040161040f906123fd565b6001600160a01b038116610f1a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161040f565b610698816112b4565b610f2c826115f0565b610f3784838361164e565b600082815260cf602090815260408083206001600160a01b0388811685529252808320805485810390915591861683528220805491928492610f7a908490612585565b90915550505050505050565b6001600160a01b0384163b156111105760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610fca9089908990889088908890600401612598565b6020604051808303816000875af1925050508015611005575060408051601f3d908101601f19168201909252611002918101906125f6565b60015b6110b057611011612620565b806308c379a00361104a575061102561263c565b80611030575061104c565b8060405162461bcd60e51b815260040161040f9190611b73565b505b60405162461bcd60e51b815260206004820152603360248201527f455243313135353a7472616e7366657220746f206e6f6e20455243313135355260448201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606482015260840161040f565b6001600160e01b0319811663bc197c8160e01b14610d785760405162461bcd60e51b815260206004820181905260248201527f455243313135353a4552433131353552656365697665722072656a6563746564604482015260640161040f565b505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146106985760405162461bcd60e51b815260040161040f906123fd565b600061117a611118565b9050611185846116f0565b6000835111806111925750815b156111a3576111a18484611795565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166105cc57805460ff191660011781556040516001600160a01b038316602482015261122290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611795565b50805460ff19168155611233611118565b6001600160a01b0316826001600160a01b0316146112ab5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840161040f565b6105cc85611880565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff168061131f575060005460ff16155b61133b5760405162461bcd60e51b815260040161040f90612537565b600054610100900460ff1615801561135d576000805461ffff19166101011790555b6113656118c0565b61092261192a565b600054610100900460ff1680611386575060005460ff16155b6113a25760405162461bcd60e51b815260040161040f90612537565b600054610100900460ff161580156113c4576000805461ffff19166101011790555b6113cc6118c0565b6109226118c0565b6001600160a01b0382166113fa5760405162461bcd60e51b815260040161040f9061225c565b611403816115f0565b61140d828261198a565b600090815260cf602090815260408083206001600160a01b03909416835292905290812055565b6001600160a01b03861661145a5760405162461bcd60e51b815260040161040f9061225c565b61146483836119e3565b600083815260cf602090815260408083206001600160a01b038a16845290915281208054849290611496908490612585565b9091555050600083815260ce602052604090206114b38282612478565b50600083815260d160209081526040808320805460ff1916600117905560cc90915290206114e18682612478565b50600083815260cd602052604090206114fa8582612478565b50505060cb55505050565b6001600160a01b0384163b156111105760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061154990899089908890889088906004016126c5565b6020604051808303816000875af1925050508015611584575060408051601f3d908101601f19168201909252611581918101906125f6565b60015b61159057611011612620565b6001600160e01b0319811663f23a6e6160e01b14610d785760405162461bcd60e51b815260206004820181905260248201527f455243313135353a4552433131353552656365697665722072656a6563746564604482015260640161040f565b600081815260d1602052604090205460ff166106985760405162461bcd60e51b815260206004820152601960248201527f455243313135353a6e6f6e6578697374656e7420746f6b656e00000000000000604482015260640161040f565b600081116116975760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b604482015260640161040f565b806116a284846103e7565b10156108805760405162461bcd60e51b815260206004820152601c60248201527f455243313135353a696e73756666696369656e742062616c616e636500000000604482015260640161040f565b803b6117545760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161040f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6117f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161040f565b600080846001600160a01b03168460405161180f919061270a565b600060405180830381855af49150503d806000811461184a576040519150601f19603f3d011682016040523d82523d6000602084013e61184f565b606091505b5091509150611877828260405180606001604052806027815260200161272760279139611a84565b95945050505050565b611889816116f0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff16806118d9575060005460ff16155b6118f55760405162461bcd60e51b815260040161040f90612537565b600054610100900460ff16158015610922576000805461ffff19166101011790558015610698576000805461ff001916905550565b600054610100900460ff1680611943575060005460ff16155b61195f5760405162461bcd60e51b815260040161040f90612537565b600054610100900460ff16158015611981576000805461ffff19166101011790555b610922336112b4565b600061199683836103e7565b116108395760405162461bcd60e51b815260206004820152601c60248201527f455243313135353a696e73756666696369656e742062616c616e636500000000604482015260640161040f565b60008111611a2c5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b604482015260640161040f565b600082815260d1602052604090205460ff16156108395760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d4d4e985b1c9958591e481b5a5b9d195960521b604482015260640161040f565b60608315611a93575081611abd565b825115611aa35782518084602001fd5b8160405162461bcd60e51b815260040161040f9190611b73565b9392505050565b80356001600160a01b0381168114611adb57600080fd5b919050565b60008060408385031215611af357600080fd5b611afc83611ac4565b946020939093013593505050565b600060208284031215611b1c57600080fd5b5035919050565b60005b83811015611b3e578181015183820152602001611b26565b50506000910152565b60008151808452611b5f816020860160208601611b23565b601f01601f19169290920160200192915050565b602081526000611abd6020830184611b47565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611bc157611bc1611b86565b6040525050565b60006001600160401b03821115611be157611be1611b86565b5060051b60200190565b600082601f830112611bfc57600080fd5b81356020611c0982611bc8565b604051611c168282611b9c565b83815260059390931b8501820192828101915086841115611c3657600080fd5b8286015b84811015611c515780358352918301918301611c3a565b509695505050505050565b600082601f830112611c6d57600080fd5b81356001600160401b03811115611c8657611c86611b86565b604051611c9d601f8301601f191660200182611b9c565b818152846020838601011115611cb257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611ce757600080fd5b611cf086611ac4565b9450611cfe60208701611ac4565b935060408601356001600160401b0380821115611d1a57600080fd5b611d2689838a01611beb565b94506060880135915080821115611d3c57600080fd5b611d4889838a01611beb565b93506080880135915080821115611d5e57600080fd5b50611d6b88828901611c5c565b9150509295509295909350565b600060208284031215611d8a57600080fd5b611abd82611ac4565b60008060408385031215611da657600080fd5b82356001600160401b0380821115611dbd57600080fd5b818501915085601f830112611dd157600080fd5b81356020611dde82611bc8565b604051611deb8282611b9c565b83815260059390931b8501820192828101915089841115611e0b57600080fd5b948201945b83861015611e3057611e2186611ac4565b82529482019490820190611e10565b96505086013592505080821115611e4657600080fd5b50611e5385828601611beb565b9150509250929050565b600081518084526020808501945080840160005b83811015611e8d57815187529582019590820190600101611e71565b509495945050505050565b602081526000611abd6020830184611e5d565b60008060408385031215611ebe57600080fd5b611ec783611ac4565b915060208301356001600160401b03811115611ee257600080fd5b611e5385828601611c5c565b60008060408385031215611f0157600080fd5b82356001600160401b0380821115611f1857600080fd5b611f2486838701611c5c565b93506020850135915080821115611f3a57600080fd5b50611e5385828601611c5c565b60008060408385031215611f5a57600080fd5b611f6383611ac4565b915060208301358015158114611f7857600080fd5b809150509250929050565b60008060408385031215611f9657600080fd5b611f9f83611ac4565b915060208301356001600160401b03811115611fba57600080fd5b611e5385828601611beb565b600082601f830112611fd757600080fd5b81356020611fe482611bc8565b604051611ff18282611b9c565b83815260059390931b850182019282810191508684111561201157600080fd5b8286015b84811015611c515780356001600160401b038111156120345760008081fd5b6120428986838b0101611c5c565b845250918301918301612015565b60008060008060008060c0878903121561206957600080fd5b61207287611ac4565b955060208701356001600160401b038082111561208e57600080fd5b61209a8a838b01611fc6565b965060408901359150808211156120b057600080fd5b6120bc8a838b01611fc6565b955060608901359150808211156120d257600080fd5b6120de8a838b01611beb565b945060808901359150808211156120f457600080fd5b6121008a838b01611fc6565b935060a089013591508082111561211657600080fd5b5061212389828a01611c5c565b9150509295509295509295565b60008060008060008060c0878903121561214957600080fd5b61215287611ac4565b955060208701356001600160401b038082111561216e57600080fd5b61217a8a838b01611c5c565b9650604089013591508082111561219057600080fd5b61219c8a838b01611c5c565b95506060890135945060808901359150808211156121b957600080fd5b6121008a838b01611c5c565b600080604083850312156121d857600080fd5b6121e183611ac4565b91506121ef60208401611ac4565b90509250929050565b600080600080600060a0868803121561221057600080fd5b61221986611ac4565b945061222760208701611ac4565b9350604086013592506060860135915060808601356001600160401b0381111561225057600080fd5b611d6b88828901611c5c565b602080825260149082015273455243313135353a7a65726f206164647265737360601b604082015260600190565b600181811c9082168061229e57607f821691505b6020821081036122be57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f455243313135353a6c656e677468206d69736d61746368000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161233957612339612311565b5060010190565b6040815260006123536040830185611e5d565b82810360208401526118778185611e5d565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b601f82111561088057600081815260208120601f850160051c810160208610156124595750805b601f850160051c820191505b8181101561111057828155600101612465565b81516001600160401b0381111561249157612491611b86565b6124a58161249f845461228a565b84612432565b602080601f8311600181146124da57600084156124c25750858301515b600019600386901b1c1916600185901b178555611110565b600085815260208120601f198616915b82811015612509578886015182559484019460019091019084016124ea565b50858210156125275787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8082018082111561043d5761043d612311565b6001600160a01b0386811682528516602082015260a0604082018190526000906125c490830186611e5d565b82810360608401526125d68186611e5d565b905082810360808401526125ea8185611b47565b98975050505050505050565b60006020828403121561260857600080fd5b81516001600160e01b031981168114611abd57600080fd5b600060033d11156126395760046000803e5060005160e01c5b90565b600060443d101561264a5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561267957505050505090565b82850191508151818111156126915750505050505090565b843d87010160208285010111156126ab5750505050505090565b6126ba60208286010187611b9c565b509095945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906126ff90830184611b47565b979650505050505050565b6000825161271c818460208701611b23565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205f4a6466cebf79131a67e537a293e9cc7379bca016a38526c3f1129bdbacd97264736f6c63430008100033"

// DeployERC1155 deploys a new Ethereum contract, binding an instance of ERC1155 to it.
func DeployERC1155(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC1155, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC1155ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC1155Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC1155{ERC1155Caller: ERC1155Caller{contract: contract}, ERC1155Transactor: ERC1155Transactor{contract: contract}, ERC1155Filterer: ERC1155Filterer{contract: contract}}, nil
}

// ERC1155 is an auto generated Go binding around an Ethereum contract.
type ERC1155 struct {
	ERC1155Caller     // Read-only binding to the contract
	ERC1155Transactor // Write-only binding to the contract
	ERC1155Filterer   // Log filterer for contract events
}

// ERC1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC1155Session struct {
	Contract     *ERC1155          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC1155CallerSession struct {
	Contract *ERC1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ERC1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC1155TransactorSession struct {
	Contract     *ERC1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC1155Raw struct {
	Contract *ERC1155 // Generic contract binding to access the raw methods on
}

// ERC1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC1155CallerRaw struct {
	Contract *ERC1155Caller // Generic read-only contract binding to access the raw methods on
}

// ERC1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC1155TransactorRaw struct {
	Contract *ERC1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC1155 creates a new instance of ERC1155, bound to a specific deployed contract.
func NewERC1155(address common.Address, backend bind.ContractBackend) (*ERC1155, error) {
	contract, err := bindERC1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC1155{ERC1155Caller: ERC1155Caller{contract: contract}, ERC1155Transactor: ERC1155Transactor{contract: contract}, ERC1155Filterer: ERC1155Filterer{contract: contract}}, nil
}

// NewERC1155Caller creates a new read-only instance of ERC1155, bound to a specific deployed contract.
func NewERC1155Caller(address common.Address, caller bind.ContractCaller) (*ERC1155Caller, error) {
	contract, err := bindERC1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1155Caller{contract: contract}, nil
}

// NewERC1155Transactor creates a new write-only instance of ERC1155, bound to a specific deployed contract.
func NewERC1155Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC1155Transactor, error) {
	contract, err := bindERC1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1155Transactor{contract: contract}, nil
}

// NewERC1155Filterer creates a new log filterer instance of ERC1155, bound to a specific deployed contract.
func NewERC1155Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC1155Filterer, error) {
	contract, err := bindERC1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC1155Filterer{contract: contract}, nil
}

// bindERC1155 binds a generic wrapper to an already deployed contract.
func bindERC1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC1155ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1155 *ERC1155Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC1155.Contract.ERC1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1155 *ERC1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1155.Contract.ERC1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1155 *ERC1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1155.Contract.ERC1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1155 *ERC1155CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1155 *ERC1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1155 *ERC1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1155.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address owner, uint256 tokenId) view returns(uint256)
func (_ERC1155 *ERC1155Caller) BalanceOf(opts *bind.CallOpts, owner common.Address, tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "balanceOf", owner, tokenId)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address owner, uint256 tokenId) view returns(uint256)
func (_ERC1155 *ERC1155Session) BalanceOf(owner common.Address, tokenId *big.Int) (*big.Int, error) {
	return _ERC1155.Contract.BalanceOf(&_ERC1155.CallOpts, owner, tokenId)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address owner, uint256 tokenId) view returns(uint256)
func (_ERC1155 *ERC1155CallerSession) BalanceOf(owner common.Address, tokenId *big.Int) (*big.Int, error) {
	return _ERC1155.Contract.BalanceOf(&_ERC1155.CallOpts, owner, tokenId)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] owners, uint256[] tokenIds) view returns(uint256[])
func (_ERC1155 *ERC1155Caller) BalanceOfBatch(opts *bind.CallOpts, owners []common.Address, tokenIds []*big.Int) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "balanceOfBatch", owners, tokenIds)
	return *ret0, err
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] owners, uint256[] tokenIds) view returns(uint256[])
func (_ERC1155 *ERC1155Session) BalanceOfBatch(owners []common.Address, tokenIds []*big.Int) ([]*big.Int, error) {
	return _ERC1155.Contract.BalanceOfBatch(&_ERC1155.CallOpts, owners, tokenIds)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] owners, uint256[] tokenIds) view returns(uint256[])
func (_ERC1155 *ERC1155CallerSession) BalanceOfBatch(owners []common.Address, tokenIds []*big.Int) ([]*big.Int, error) {
	return _ERC1155.Contract.BalanceOfBatch(&_ERC1155.CallOpts, owners, tokenIds)
}

// GetLatestTokenId is a free data retrieval call binding the contract method 0x25d112a9.
//
// Solidity: function getLatestTokenId() view returns(uint256)
func (_ERC1155 *ERC1155Caller) GetLatestTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "getLatestTokenId")
	return *ret0, err
}

// GetLatestTokenId is a free data retrieval call binding the contract method 0x25d112a9.
//
// Solidity: function getLatestTokenId() view returns(uint256)
func (_ERC1155 *ERC1155Session) GetLatestTokenId() (*big.Int, error) {
	return _ERC1155.Contract.GetLatestTokenId(&_ERC1155.CallOpts)
}

// GetLatestTokenId is a free data retrieval call binding the contract method 0x25d112a9.
//
// Solidity: function getLatestTokenId() view returns(uint256)
func (_ERC1155 *ERC1155CallerSession) GetLatestTokenId() (*big.Int, error) {
	return _ERC1155.Contract.GetLatestTokenId(&_ERC1155.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC1155 *ERC1155Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "isApprovedForAll", owner, operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC1155 *ERC1155Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC1155.Contract.IsApprovedForAll(&_ERC1155.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC1155 *ERC1155CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC1155.Contract.IsApprovedForAll(&_ERC1155.CallOpts, owner, operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC1155 *ERC1155Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC1155 *ERC1155Session) Owner() (common.Address, error) {
	return _ERC1155.Contract.Owner(&_ERC1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC1155 *ERC1155CallerSession) Owner() (common.Address, error) {
	return _ERC1155.Contract.Owner(&_ERC1155.CallOpts)
}

// TokenName is a free data retrieval call binding the contract method 0xe725f877.
//
// Solidity: function tokenName(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155Caller) TokenName(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "tokenName", tokenId)
	return *ret0, err
}

// TokenName is a free data retrieval call binding the contract method 0xe725f877.
//
// Solidity: function tokenName(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155Session) TokenName(tokenId *big.Int) (string, error) {
	return _ERC1155.Contract.TokenName(&_ERC1155.CallOpts, tokenId)
}

// TokenName is a free data retrieval call binding the contract method 0xe725f877.
//
// Solidity: function tokenName(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155CallerSession) TokenName(tokenId *big.Int) (string, error) {
	return _ERC1155.Contract.TokenName(&_ERC1155.CallOpts, tokenId)
}

// TokenSymbol is a free data retrieval call binding the contract method 0x17fd1d80.
//
// Solidity: function tokenSymbol(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155Caller) TokenSymbol(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "tokenSymbol", tokenId)
	return *ret0, err
}

// TokenSymbol is a free data retrieval call binding the contract method 0x17fd1d80.
//
// Solidity: function tokenSymbol(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155Session) TokenSymbol(tokenId *big.Int) (string, error) {
	return _ERC1155.Contract.TokenSymbol(&_ERC1155.CallOpts, tokenId)
}

// TokenSymbol is a free data retrieval call binding the contract method 0x17fd1d80.
//
// Solidity: function tokenSymbol(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155CallerSession) TokenSymbol(tokenId *big.Int) (string, error) {
	return _ERC1155.Contract.TokenSymbol(&_ERC1155.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC1155.contract.Call(opts, out, "tokenURI", tokenId)
	return *ret0, err
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155Session) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC1155.Contract.TokenURI(&_ERC1155.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC1155 *ERC1155CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC1155.Contract.TokenURI(&_ERC1155.CallOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address owner, uint256 tokenId) returns()
func (_ERC1155 *ERC1155Transactor) Burn(opts *bind.TransactOpts, owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "burn", owner, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address owner, uint256 tokenId) returns()
func (_ERC1155 *ERC1155Session) Burn(owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC1155.Contract.Burn(&_ERC1155.TransactOpts, owner, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address owner, uint256 tokenId) returns()
func (_ERC1155 *ERC1155TransactorSession) Burn(owner common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC1155.Contract.Burn(&_ERC1155.TransactOpts, owner, tokenId)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] tokenIds) returns()
func (_ERC1155 *ERC1155Transactor) BurnBatch(opts *bind.TransactOpts, owner common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "burnBatch", owner, tokenIds)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] tokenIds) returns()
func (_ERC1155 *ERC1155Session) BurnBatch(owner common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _ERC1155.Contract.BurnBatch(&_ERC1155.TransactOpts, owner, tokenIds)
}

// BurnBatch is a paid mutator transaction binding the contract method 0xb2dc5dc3.
//
// Solidity: function burnBatch(address owner, uint256[] tokenIds) returns()
func (_ERC1155 *ERC1155TransactorSession) BurnBatch(owner common.Address, tokenIds []*big.Int) (*types.Transaction, error) {
	return _ERC1155.Contract.BurnBatch(&_ERC1155.TransactOpts, owner, tokenIds)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ERC1155 *ERC1155Transactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ERC1155 *ERC1155Session) Initialize() (*types.Transaction, error) {
	return _ERC1155.Contract.Initialize(&_ERC1155.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ERC1155 *ERC1155TransactorSession) Initialize() (*types.Transaction, error) {
	return _ERC1155.Contract.Initialize(&_ERC1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC1155 *ERC1155Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC1155 *ERC1155Session) RenounceOwnership() (*types.Transaction, error) {
	return _ERC1155.Contract.RenounceOwnership(&_ERC1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC1155 *ERC1155TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC1155.Contract.RenounceOwnership(&_ERC1155.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] tokenIds, uint256[] amounts, bytes data) returns()
func (_ERC1155 *ERC1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenIds []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, tokenIds, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] tokenIds, uint256[] amounts, bytes data) returns()
func (_ERC1155 *ERC1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, tokenIds []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeBatchTransferFrom(&_ERC1155.TransactOpts, from, to, tokenIds, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] tokenIds, uint256[] amounts, bytes data) returns()
func (_ERC1155 *ERC1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, tokenIds []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeBatchTransferFrom(&_ERC1155.TransactOpts, from, to, tokenIds, amounts, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xdb57d3aa.
//
// Solidity: function safeMint(address to, string name, string symbol, uint256 amount, string tokenURI, bytes data) returns()
func (_ERC1155 *ERC1155Transactor) SafeMint(opts *bind.TransactOpts, to common.Address, name string, symbol string, amount *big.Int, tokenURI string, data []byte) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "safeMint", to, name, symbol, amount, tokenURI, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xdb57d3aa.
//
// Solidity: function safeMint(address to, string name, string symbol, uint256 amount, string tokenURI, bytes data) returns()
func (_ERC1155 *ERC1155Session) SafeMint(to common.Address, name string, symbol string, amount *big.Int, tokenURI string, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeMint(&_ERC1155.TransactOpts, to, name, symbol, amount, tokenURI, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0xdb57d3aa.
//
// Solidity: function safeMint(address to, string name, string symbol, uint256 amount, string tokenURI, bytes data) returns()
func (_ERC1155 *ERC1155TransactorSession) SafeMint(to common.Address, name string, symbol string, amount *big.Int, tokenURI string, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeMint(&_ERC1155.TransactOpts, to, name, symbol, amount, tokenURI, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0xda71442a.
//
// Solidity: function safeMintBatch(address to, string[] name, string[] symbol, uint256[] amounts, string[] tokenURIs, bytes data) returns()
func (_ERC1155 *ERC1155Transactor) SafeMintBatch(opts *bind.TransactOpts, to common.Address, name []string, symbol []string, amounts []*big.Int, tokenURIs []string, data []byte) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "safeMintBatch", to, name, symbol, amounts, tokenURIs, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0xda71442a.
//
// Solidity: function safeMintBatch(address to, string[] name, string[] symbol, uint256[] amounts, string[] tokenURIs, bytes data) returns()
func (_ERC1155 *ERC1155Session) SafeMintBatch(to common.Address, name []string, symbol []string, amounts []*big.Int, tokenURIs []string, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeMintBatch(&_ERC1155.TransactOpts, to, name, symbol, amounts, tokenURIs, data)
}

// SafeMintBatch is a paid mutator transaction binding the contract method 0xda71442a.
//
// Solidity: function safeMintBatch(address to, string[] name, string[] symbol, uint256[] amounts, string[] tokenURIs, bytes data) returns()
func (_ERC1155 *ERC1155TransactorSession) SafeMintBatch(to common.Address, name []string, symbol []string, amounts []*big.Int, tokenURIs []string, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeMintBatch(&_ERC1155.TransactOpts, to, name, symbol, amounts, tokenURIs, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes data) returns()
func (_ERC1155 *ERC1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "safeTransferFrom", from, to, tokenId, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes data) returns()
func (_ERC1155 *ERC1155Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeTransferFrom(&_ERC1155.TransactOpts, from, to, tokenId, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes data) returns()
func (_ERC1155 *ERC1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.SafeTransferFrom(&_ERC1155.TransactOpts, from, to, tokenId, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC1155 *ERC1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC1155 *ERC1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC1155.Contract.SetApprovalForAll(&_ERC1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC1155 *ERC1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC1155.Contract.SetApprovalForAll(&_ERC1155.TransactOpts, operator, approved)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_ERC1155 *ERC1155Transactor) SetNameAndSymbol(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "setNameAndSymbol", name_, symbol_)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_ERC1155 *ERC1155Session) SetNameAndSymbol(name_ string, symbol_ string) (*types.Transaction, error) {
	return _ERC1155.Contract.SetNameAndSymbol(&_ERC1155.TransactOpts, name_, symbol_)
}

// SetNameAndSymbol is a paid mutator transaction binding the contract method 0x5a446215.
//
// Solidity: function setNameAndSymbol(string name_, string symbol_) returns()
func (_ERC1155 *ERC1155TransactorSession) SetNameAndSymbol(name_ string, symbol_ string) (*types.Transaction, error) {
	return _ERC1155.Contract.SetNameAndSymbol(&_ERC1155.TransactOpts, name_, symbol_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC1155 *ERC1155Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC1155 *ERC1155Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC1155.Contract.TransferOwnership(&_ERC1155.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC1155 *ERC1155TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC1155.Contract.TransferOwnership(&_ERC1155.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ERC1155 *ERC1155Transactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ERC1155 *ERC1155Session) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ERC1155.Contract.UpgradeTo(&_ERC1155.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ERC1155 *ERC1155TransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ERC1155.Contract.UpgradeTo(&_ERC1155.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ERC1155 *ERC1155Transactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ERC1155.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ERC1155 *ERC1155Session) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.UpgradeToAndCall(&_ERC1155.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ERC1155 *ERC1155TransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ERC1155.Contract.UpgradeToAndCall(&_ERC1155.TransactOpts, newImplementation, data)
}

// ERC1155AdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ERC1155 contract.
type ERC1155AdminChangedIterator struct {
	Event *ERC1155AdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155AdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155AdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155AdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155AdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155AdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155AdminChanged represents a AdminChanged event raised by the ERC1155 contract.
type ERC1155AdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1155 *ERC1155Filterer) FilterAdminChanged(opts *bind.FilterOpts) (*ERC1155AdminChangedIterator, error) {

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ERC1155AdminChangedIterator{contract: _ERC1155.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1155 *ERC1155Filterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ERC1155AdminChanged) (event.Subscription, error) {

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155AdminChanged)
				if err := _ERC1155.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ERC1155 *ERC1155Filterer) ParseAdminChanged(log types.Log) (*ERC1155AdminChanged, error) {
	event := new(ERC1155AdminChanged)
	if err := _ERC1155.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC1155 contract.
type ERC1155ApprovalForAllIterator struct {
	Event *ERC1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155ApprovalForAll represents a ApprovalForAll event raised by the ERC1155 contract.
type ERC1155ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC1155 *ERC1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ERC1155ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155ApprovalForAllIterator{contract: _ERC1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC1155 *ERC1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC1155ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155ApprovalForAll)
				if err := _ERC1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC1155 *ERC1155Filterer) ParseApprovalForAll(log types.Log) (*ERC1155ApprovalForAll, error) {
	event := new(ERC1155ApprovalForAll)
	if err := _ERC1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC1155BeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ERC1155 contract.
type ERC1155BeaconUpgradedIterator struct {
	Event *ERC1155BeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155BeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155BeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155BeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155BeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155BeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155BeaconUpgraded represents a BeaconUpgraded event raised by the ERC1155 contract.
type ERC1155BeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1155 *ERC1155Filterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ERC1155BeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155BeaconUpgradedIterator{contract: _ERC1155.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1155 *ERC1155Filterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ERC1155BeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155BeaconUpgraded)
				if err := _ERC1155.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ERC1155 *ERC1155Filterer) ParseBeaconUpgraded(log types.Log) (*ERC1155BeaconUpgraded, error) {
	event := new(ERC1155BeaconUpgraded)
	if err := _ERC1155.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC1155OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC1155 contract.
type ERC1155OwnershipTransferredIterator struct {
	Event *ERC1155OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155OwnershipTransferred represents a OwnershipTransferred event raised by the ERC1155 contract.
type ERC1155OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC1155 *ERC1155Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC1155OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155OwnershipTransferredIterator{contract: _ERC1155.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC1155 *ERC1155Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC1155OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155OwnershipTransferred)
				if err := _ERC1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC1155 *ERC1155Filterer) ParseOwnershipTransferred(log types.Log) (*ERC1155OwnershipTransferred, error) {
	event := new(ERC1155OwnershipTransferred)
	if err := _ERC1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the ERC1155 contract.
type ERC1155TransferBatchIterator struct {
	Event *ERC1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155TransferBatch represents a TransferBatch event raised by the ERC1155 contract.
type ERC1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	TokenIds []*big.Int
	Amounts  []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] tokenIds, uint256[] amounts)
func (_ERC1155 *ERC1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ERC1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155TransferBatchIterator{contract: _ERC1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] tokenIds, uint256[] amounts)
func (_ERC1155 *ERC1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *ERC1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155TransferBatch)
				if err := _ERC1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] tokenIds, uint256[] amounts)
func (_ERC1155 *ERC1155Filterer) ParseTransferBatch(log types.Log) (*ERC1155TransferBatch, error) {
	event := new(ERC1155TransferBatch)
	if err := _ERC1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the ERC1155 contract.
type ERC1155TransferSingleIterator struct {
	Event *ERC1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155TransferSingle represents a TransferSingle event raised by the ERC1155 contract.
type ERC1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	TokenId  *big.Int
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 tokenId, uint256 amount)
func (_ERC1155 *ERC1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ERC1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155TransferSingleIterator{contract: _ERC1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 tokenId, uint256 amount)
func (_ERC1155 *ERC1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *ERC1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155TransferSingle)
				if err := _ERC1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 tokenId, uint256 amount)
func (_ERC1155 *ERC1155Filterer) ParseTransferSingle(log types.Log) (*ERC1155TransferSingle, error) {
	event := new(ERC1155TransferSingle)
	if err := _ERC1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the ERC1155 contract.
type ERC1155URIIterator struct {
	Event *ERC1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155URI represents a URI event raised by the ERC1155 contract.
type ERC1155URI struct {
	Value   string
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed tokenId)
func (_ERC1155 *ERC1155Filterer) FilterURI(opts *bind.FilterOpts, tokenId []*big.Int) (*ERC1155URIIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "URI", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155URIIterator{contract: _ERC1155.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed tokenId)
func (_ERC1155 *ERC1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *ERC1155URI, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "URI", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155URI)
				if err := _ERC1155.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed tokenId)
func (_ERC1155 *ERC1155Filterer) ParseURI(log types.Log) (*ERC1155URI, error) {
	event := new(ERC1155URI)
	if err := _ERC1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC1155UpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ERC1155 contract.
type ERC1155UpgradedIterator struct {
	Event *ERC1155Upgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155UpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155Upgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155Upgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155UpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155UpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155Upgraded represents a Upgraded event raised by the ERC1155 contract.
type ERC1155Upgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1155 *ERC1155Filterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ERC1155UpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC1155.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155UpgradedIterator{contract: _ERC1155.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1155 *ERC1155Filterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ERC1155Upgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ERC1155.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155Upgraded)
				if err := _ERC1155.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ERC1155 *ERC1155Filterer) ParseUpgraded(log types.Log) (*ERC1155Upgraded, error) {
	event := new(ERC1155Upgraded)
	if err := _ERC1155.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}
